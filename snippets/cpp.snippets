snippet cp
	/*
	Created by: Mouad Berqia
	*/
	#include <iostream>
	#include <string>
	#include <vector>
	#include <algorithm>
	#include <iterator>
	#include <set>
	#include <map>
	#include <unordered_set>
	#include <unordered_map>
	#include <queue>
	#include <stack>
	#include <deque>
	#define all(x) (x).begin(), (x).end()
	#define sz(x) (int)(x).size()
	typedef long long ll;

	using namespace std;
	int main(){
		ios_base::sync_with_stdio(false);
		cin.tie(NULL);
		
		#ifndef ONLINE_JUDGE
		freopen("input.txt", "r", stdin);
		#endif

		$1

		return 0;
	}

snippet mt
	ll t; cin >> t;
	while(t--){

	}

snippet segtree
	int n ;
	const int N = 1e5;
	int tree[2 * N];
  
	// function to build the tree
	void build( int arr[]) { 
    		// insert leaf nodes in tree
    		for (int i=0; i<n; i++)    
        		tree[n+i] = arr[i];
      
    		// build the tree by calculating parents
    		for (int i = n - 1; i > 0; --i)     
        		tree[i] = tree[i<<1] + tree[i<<1 | 1];    
	}
  
	// function to update a tree node
	void updateTreeNode(int p, int value) { 
    		// set value at position p
    		tree[p+n] = value;
    		p = p+n;
      
    		// move upward and update parents
    		for (int i=p; i > 1; i >>= 1)
        		tree[i>>1] = tree[i] + tree[i^1];
	}
  
	// function to get sum on interval [l, r)
	int query(int l, int r) { 
		int res = 0;
      
    		// loop to find the sum in the range
		for (l += n, r += n; l < r; l >>= 1, r >>= 1){
        		if (l&1) 
            		res += tree[l++];
      
        		if (r&1) 
            		res += tree[--r];
    		}
      
    		return res;
	}


snippet bit
	int n;
	const int N = 1e5;
	int bit[N];
  
	// function to update a tree node
	void update(int x, int val) {
    		for (; x < n; x = x | (x + 1))
			bit[x] += val;
	}
  
	// function to get sum on interval [0, r]
	int query(int r) {
    		int res = 0;
    		for (; r >= 0; r = (r & (r + 1)) - 1)
			res += bit[r];
    		return res;
	}

snippet sparseMin
	int n;
	const int N = 1e5;
	int a[N];
	int st[N][20];
  
	// function to build the sparse table
	void buildSparseTable() {
    		for (int i = 0; i < n; i++)
			st[i][0] = a[i];
      
    		for (int j = 1; (1 << j) <= n; j++) {
			for (int i = 0; (i + (1 << j) - 1) < n; i++) {
	    			if (st[i][j - 1] < st[i + (1 << (j - 1))][j - 1])
					st[i][j] = st[i][j - 1];
	    			else
					st[i][j] = st[i + (1 << (j - 1))][j - 1];
			}
    		}
	}
  
	// function to get the minimum value in range [L, R]
	int query(int L, int R) {
    		int j = (int)log2(R - L + 1);
    		if (st[L][j] <= st[R - (1 << j) + 1][j])
			return st[L][j];
    		else
			return st[R - (1 << j) + 1][j];
	}

snippet matrixExp
	const int N = 1e3;
	int n;
	int a[N][N];
	int res[N][N];
  
	// function to multiply two matrices
	void multiply(int a[][N], int b[][N]) {
    		int mul[N][N];
    		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
	    			mul[i][j] = 0;
	    			for (int k = 0; k < n; k++)
					mul[i][j] += (a[i][k] * b[k][j]);
			}
    		}
    		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
	    			a[i][j] = mul[i][j];
	}
  
	// function to compute A^n
	void matrixExponentiation(int A[][N], int n) {
    		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
	    			if (i == j)
					res[i][j] = 1;
	    			else
					res[i][j] = 0;
      
    		while (n) {
			if (n & 1)
	    			multiply(res, A);
			multiply(A, A);
			n >>= 1;
    		}
	}


snippet kmp
	const int N = 1e5;
	int n, m;
	string s, t;
	int lps[N];
  
	// function to compute the lps array
	void computeLPSArray() {
    		int len = 0;
    		lps[0] = 0;
    		int i = 1;
    		while (i < m) {
			if (t[i] == t[len]) {
	    			len++;
	    			lps[i] = len;
	    			i++;
			} else {
	    			if (len != 0)
					len = lps[len - 1];
	    			else {
					lps[i] = 0;
					i++;
	    			}
			}
    		}
	}
  
	// function to find the pattern in the given string
	void kmpSearch() {
    		computeLPSArray();
    		int i = 0, j = 0;
    		while (i < n) {
			if (t[j] == s[i]) {
	    			i++;
	    			j++;
			}
			if (j == m) {
	    			cout << "Found pattern at index " << i - j << endl;
	    			j = lps[j - 1];
			} else if (i < n && t[j] != s[i]) {
	    			if (j != 0)
					j = lps[j - 1];
	    			else
					i++;
			}
    		}
	}


